{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEAC,SAASC,iBAAiB,oBAAoB,WAC5C,IAAMC,EAAOF,SAASG,cAAc,QAsBpC,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IA9BFJ,EAKLA,EAAKD,iBAAiB,UAAU,SAAUa,GACxCA,EAAMC,iBAEN,IAAMT,EAAQU,SAASd,EAAKe,SAAgB,MAAEC,OACxCC,EAAOH,SAASd,EAAKe,SAAe,KAAEC,OACtCE,EAASJ,SAASd,EAAKe,SAAiB,OAAEC,OAE5CG,MAAMf,IAAUe,MAAMF,IAASE,MAAMD,GACvCE,QAAQC,MAAM,wBAoBlB,SAA0BH,EAAQI,EAAcL,GAC9C,IAAK,IAAIM,EAAI,EAAGA,GAAKL,EAAQK,IAAK,CAIhCrB,EAHiBqB,EACHD,GAAgBC,EAAI,GAAKN,GAGpCO,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBsB,EAAA9B,GAAS+B,OAAOC,QACd,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAGjD0B,OAAM,SAAAL,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBsB,EAAA9B,GAAS+B,OAAOI,QACd,sBAAqCF,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,KA7BnD4B,CAAiBd,EAAQd,EAAOa,E,IAhBhCG,QAAQC,MAAM,yB","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  const form = document.querySelector('form');\n\n  if (!form) {\n    console.error('Form element not found');\n    return;\n  }\n\n  form.addEventListener('submit', function (event) {\n    event.preventDefault();\n\n    const delay = parseInt(form.elements['delay'].value);\n    const step = parseInt(form.elements['step'].value);\n    const amount = parseInt(form.elements['amount'].value);\n\n    if (isNaN(delay) || isNaN(step) || isNaN(amount)) {\n      console.error('Invalid input values');\n      return;\n    }\n\n    generatePromises(amount, delay, step);\n  });\n\n  function createPromise(position, delay) {\n    const shouldResolve = Math.random() > 0.3;\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n  function generatePromises(amount, initialDelay, step) {\n    for (let i = 1; i <= amount; i++) {\n      const position = i;\n      const delay = initialDelay + (i - 1) * step;\n\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n    }\n  }\n});\n"],"names":["$6JpON","parcelRequire","document","addEventListener","form","querySelector","createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","event","preventDefault","parseInt","elements","value","step","amount","isNaN","console","error","initialDelay","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","generatePromises"],"version":3,"file":"03-promises.b4aedc81.js.map"}